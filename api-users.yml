swagger: '2.0'
info:
  description: REST API Multicaja
  version: '1.0'
  title: REST API
  termsOfService: Terms of service
  license:
    name: Apache License Version 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0'
host: 'api.multicaja.cl'
basePath: /v1.0/
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: clientes
    description: Operaciones directamente con relacionadas un cliente
  - name: contacto
    description: Para contactar a un cliente y validar datos de contacto
  - name: cuentas
    description: Operaciones relacionadas con las cuentas bancarias de un cliente
  - name: direcciones
    description: Operaciones relacionadas con la dirección física de un cliente
  - name: parámetros
    description: Listas de parámetros inmutables
  - name: prepago
    description: Operaciones relacionadas con Prepago Multicaja
paths:
  /users:
    post:
      summary: Registra un nuevo cliente
      tags: 
        - clientes
      description: |
        Registra a un nuevo cliente. 
        ### Notas
        * Requiere al menos los campos mínimos de User: rut y correo.
        * El servicio también funcionará con el `rut` de un cliente existente con `globalStatus` `"pre-registro"`.
        * Si se intenta crear un usuario con un `rut` o un `email` que ya ha sido usado y con `globalStatus` distinto de `"pre-registro"`, el servicio retornará `405`.
        * `clave` debe ser númérica, de 4 dígitos, no consecutivos, no iguales, y que no correspondan a ninguna parte de `rut.value`
        * Si se incluye el campo `clave`, `globalStatus` cambiará a `"activo"`
        * Si se incluye `rut.serial_number`, se invocará al SRCeI para validar la cédula. Si esa validación fuera exitosa, `rut.status` pasará a "validado". Si la validación no fuera exitosa, `rut.status` cambiará a (o seguirá siendo) "no validado". Esta llamada se hará de manera síncrona, por lo que el servicio no retornará hasta que el SRCeI responda.
        
        ### Recomendaciones
        * Dado que el servicio no funciona si el `rut` o el `email` ya han sido usados (a menos que pertenezcan a un cliente con `globalStatus` `"pre-registro"`), debería buscarlo primero por `rut` y luego por `email` usando el método `/users/find`
      parameters:
        - in: body
          name: user
          description: Parámetros del usuario a crear
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '405':
          description: El usuario ya existe
  /users/{user_id}:
    get:
      summary: Retorna un cliente.
      tags: 
        - clientes
      description: |
        Lee los datos de un cliente.
        ### Notas
        * Incluye los objetos `rut`, `email` y `cellphone`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Cliente no existe
    put:
      summary: Actualiza un cliente
      tags: 
        - clientes
      description: |
        Modifica los datos de un cliente
        
        ### Notas
        * Pese a que el rut es requerido, no es modificable. Si se proporciona un RUT distinto al del cliente `{user_id}`, el servicio retornará `422`
        * `clave` debe ser númérica, de 4 dígitos, no consecutivos, no iguales, y que no correspondan a ninguna parte de `rut.value`
        * Si se incluye el campo `clave` y `globalStatus` era `"pre-registro"`, `globalStatus` cambiará a `"activo"`
        * No se podrá modificar `email.value` si cliente no tiene clave. Si se intenta modificar un email de un cliente que no tiene clave, el servicio retornará `422`.
        * No se podrá modificar `email.value` si `email.status == "validado"`. Si se intenta modificar un email validado a través de este método, el servicio retornará `422`. Para modificar un correo validado, se debe usar los métodos de la URL `/user/{user_id}/mail`. La excepción a esta regla son los clientes con `globalStatus == "pre-registro"`. Si se intenta modificar un email validado de un cliente "pre-registro", la modificación tendrá éxito y `email.status` pasará a ser `"no validado"`.
        * No se podrá modificar `cellphone.value` si `celular.status == "validado"`. Si se intenta modificar un celular validado a través de este método, el servicio retornará `422`. Para modificar un celular validado, se debe usar los métodos de la URL `/user/{user_id}/sms`. La excepción a esta regla son los clientes con `globalStatus == "pre-registro"`. Si se intenta modificar un celular validado de un cliente "pre-registro", la modificación tendrá éxito y `celular.status` pasará a ser `"no validado"`.
        * Si se incluye `rut.serial_number`, se invocará al SRCeI para validar la cédula. Si esa validación fuera exitosa, `rut.status` pasará a "validado". Si la validación no fuera exitosa, `rut.status` cambiará a (o seguirá siendo) "no validado". Esta llamada se hará de manera síncrona, por lo que el servicio no retornará hasta que el SRCeI responda.
        * Los campos `gender`, `birthday`, `name`, `lastname_1` y `lastname_2` no tienen restricciones de modificación
        
        ### Recomendaciones
        * Sólo envíe los campos mínimos y los que se desee modificar. Por ejemplo, para cambiar el nombre, sólo incluya `rut.value`, `email.value` y `name`. Para validar la cédula contra el SRCeI, sólo incluya `rut.value`, `email.value` y `rut.status`.
        * Si se desea cambiar la clave del cliente, valide la clave anterior en primer lugar
        
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: user
          description: Parámetros a modificar
          required: true
          schema:
            $ref: '#/definitions/User'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Cliente no existe
        '422':
          description: Datos inválidos - Revisar error
  /users/find:
    get:
      summary: Retorna un cliente
      tags: 
        - clientes
      description: |
        Busca a un cliente por rut, por email o por celular
      parameters:
        - name: "rut"
          in: "query"
          description: "Rut sin puntos ni dígito verificador"
          type: integer
        - name: "email"
          in: "query"
          description: "Email"
          type: string
        - name: "cellphone"
          in: "query"
          description: "Celular (9 dígitos)"
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/User'
        '404':
          description: Cliente no existe
  /users/{user_id}/mail:
    post:
      summary: Envía un correo electrónico al cliente
      tags: 
        - contacto
      description: |
        Envía una comunicación o correo de validación al cliente

        ### Notas
        * `template_data` debe incluirse si el `template` requiere datos mínimos. Los datos deben ir en formato JSON. En caso contrario, el servicio retornará `422`.
        * `user_callback_uri` debe incluirse si el `template` incluye un link para que el usuario haga click. En caso contrario, el servicio retornará `422`.
        * Si se incluye `user_callback_uri`, no se incluye `address`, y el usuario hace clic en el link que indica el correo, el sistema actualizará automáticamente a `validado` el campo `email.status` del Cliente. Esto se logra incluyendo en el correo un link a una URI temporal que realiza el cambio y luego redirige a `user_callback_uri`.
        * `address` permite cambiar el correo electrónico cuando el cliente tiene un correo validado. Si se incluye tanto `user_callback_uri`  como `address`, y el usuario hace clic en el link que indica el correo, el sistema cambiará automáticamente el correo del cliente a la dirección que indica `address` y lo dejará como `validado`. 
        * La validación de correos se logra incluyendo en el correo un link a una URI temporal que realiza el cambio de estatus y luego redirige a `user_callback_uri`.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: mail
          description: Correo electrónico a enviar
          required: true
          schema:
            type: object
            required: 
              - template
            properties:
              template:
                type: string
                description: Tipo de correo electrónico a enviar
                example: "Prepago/ValidacionCorreo"
              template_data:
                type: string
                description: JSON con tantos pares llave-valor como requiera el template del correo a enviar
                example: "{'saludo': 'Estimado Pepito', 'despedida': 'Chao!'}"
              user_callback_uri:
                type: string
                description: Link que incluirá el correo si el `template` lo soporta
                example: "https://www.multicaja.cl/prepago/registro?u=3242343"
              address:
                type: string
                description: Correo electrónico al que se enviará este mensaje. Si no se incluye este campo, se usará el campo `email.value`  del Cliente.
                example: "pepito@gmail.com"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: Datos inválidos - Revisar error
  /users/{user_id}/sms:
    post:
      summary: Envía un sms al cliente
      tags: 
        - contacto
      description: |
        Permite mandar un mensaje por sms al cliente
        ### Notas
        **Sólo incluir `cellphone` si el usuario ya tiene celular e intenta cambiarlo**
        * Si el `template` requiere datos mínimos, debe incluirse estos datos en formato JSON mediante el campo `template_data`
        * Si el cliente indica no haber recibido el sms, reintente el envío cambiando `gateway` por `"secondary"`
        * No intente enviar códigos de validación a mano. Use un `template` que lo soporte.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: mail
          description: SMS a enviar
          required: true
          schema:
            type: object
            required: 
              - template
            properties:
              template:
                type: string
                description: Tipo de sms a enviar
                example: "Prepago/ValidacionCelular"
              gateway:
                type: string
                enum:
                  - primary
                  - secondary
                description: |
                  Gateway por el que se enviará el SMS
                  * primary: Gateway primaria (default)
                  * secondary: Gateway secundaria, usar sólo si el cliente dice no haber recibido el SMS
              cellphone:
                type: string
                description: Celular al que se enviará este mensaje. Corresponde a los 9 números que siguen a '+56'.  Si no se incluye este campo, se usará el campo `cellphone.value`  del Cliente.
                example: "912345678"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: Datos inválidos - Revisar error
    put:
      summary: Valida un código enviado por sms al cliente
      tags: 
        - contacto
      description: |
        Valida un código enviado mediante POST a `/users/{user_id}/sms`
        ### Notas
        * Sólo invocar este método para validar celular si se ha enviado previamente un código por SMS haciendo POST a `/users/{user_id}/sms`
        * Dependiendo del template usado en el POST a `/users/{user_id}/sms`, esta llamada podría cambiar `cellphone.status` a `"validado"`. Esto ocurrirá sólo si el código proporcionado corresponde al que fue enviado al celular`.
        * Si el código ingresado no corresponde al que fue enviado al cliente, el servicio retornará `422`.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: sms_code
          description: Código ingresado por el cliente
          required: true
          schema:
            type: integer
            example: "123456"
      responses:
        '201':
          description: OK
          schema:
            type: boolean
        '404':
          description: Cliente no existe
        '422':
          description: Código no es válido
  /users/{user_id}/prepaid:
    get:
      summary: Indica si el cliente tiene un Prepago Multicaja
      tags: 
        - prepago
      description: |
        Indica si el cliente tiene un Prepago Multicaja. En caso afirmativo, retorna la tarjeta truncada.
        
        * Si el cliente tiene Prepago Multicaja, `has_prepaid_account` será `true`.
        * `card.timestamps.created_at` indicará la fecha en la que este cliente obtuvo su primera tarjeta de prepago
        * `card.timestamps.updated_at` indicará la fecha de la última acción de *bloqueo*, *desbloqueo* y *reemisión*.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
          schema:
            type: object
            required:
              - has_prepaid_card
            properties:
              has_prepaid_card:
                type: string
                description: "`true` si el cliente tiene un Prepago Multicaja; `false` en caso contrario"
                example: true
              card:
                $ref: '#/definitions/PrepaidCard'
        '404':
          description: Cliente no existe o no tiene un Prepago Multicaja
  /users/{user_id}/prepaid/issue:
    post:
      summary: Emite un Prepago Multicaja
      tags: 
        - prepago
      description: |
        Asigna una tarjeta Prepago Multicaja a este cliente.
        
        **Como requisito para invocar este servicio, el cliente debe tener `name` y `lastname_1` no vacíos, y además cumplir que `(rut.status == "validado_srcei" || rut.status == "validado_tef") && email.status == "validado" && cellphone.stauts == "validado"`**
        
        * `initial_balance`: Saldo inicial de la tarjeta
        * Si el cliente ya tiene un Prepago Multicaja, este servicio retornará `405`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: initial_balance
          description: Saldo inicial de la tarjeta en pesos
          required: true
          schema:
            type: integer
            example: 5000
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/PrepaidCard'
        '404':
          description: Cliente no existe
        '405':
          description: Cliente ya cuenta con un Prepago Multicaja. Si quiere reemitir la tarjeta, use el método reissue.
  /users/{user_id}/prepaid/balance:
    get:
      summary: Retorna el saldo
      tags: 
        - prepago
      description: |
        Retorna el saldo de la tarjeta
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
          schema:
            type: integer
            description: Saldo de la tarjeta
            example: 3250
        '404':
          description: Cliente no existe o no tiene un Prepago Multicaja
  /users/{user_id}/prepaid/balance/topup:
    post:
      summary: Aumenta el saldo
      tags: 
        - prepago
      description: |
        Aumenta el saldo
        
        Retorna el nuevo saldo de la tarjeta y un movimiento con un código de autorización
        
        * `topup_amount` corresponde al monto en pesos que se desea recargar
        * `merchant_transaction_id` corresponde a un identificador de la recarga en el canal. El servicio es idempotente para recargas con el mismo identificador y con idéntico `topup_amount`.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: recarga
          required: true
          schema:
            type: object
            properties:
              merchant_transaction_id:
                type: string
                description: Identificador único de la recarga en el canal
                example: "20180315-77685-12"
              topup_amount:
                description: Monto de la recarga
                type: integer
                example: 5000
      responses:
        '201':
          description: OK
          schema:
            type: object
            properties:
              balance:
                type: integer
                description: Saldo de la tarjeta
                example: 3250
              transaction:
                $ref: '#/definitions/PrepaidTransaction'
        '404':
          description: Cliente no existe o no tiene un Prepago Multicaja
  /users/{user_id}/prepaid/balance/withdraw:
    post:
      summary: Genera un retiro
      tags: 
        - prepago
      description: |
        Disminuye el saldo de la tarjeta
        
        Retorna el nuevo saldo de la tarjeta y un movimiento con un código de autorización
        
        * `withdrawal_amount` corresponde al monto en pesos que se desea retirar
        * `merchant_transaction_id` corresponde a un identificador del retiro en el canal. El servicio es idempotente para retiros con el mismo identificador y con idéntico `withdrawal_amount`.
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: retiro
          required: true
          schema:
            type: object
            properties:
              merchant_transaction_id:
                type: string
                description: Identificador único del retiro en el canal
                example: "20180315-77685-12"
              withdrawal_amount:
                description: Monto del retiro
                type: integer
                example: 5000
      responses:
        '201':
          description: OK
          schema:
            type: object
            properties:
              balance:
                type: integer
                description: Saldo de la tarjeta
                example: 3250
              transaction:
                $ref: '#/definitions/PrepaidTransaction'
        '404':
          description: Cliente no existe o no tiene un Prepago Multicaja
  /users/{user_id}/prepaid/reissue:
    post:
      summary: Reemite la tarjeta de este cliente
      tags:
        - prepago
      description: |
        Bloquea la tarjeta activa y emite una tarjeta Prepago Multicaja a este cliente.
        
        **Para invocar este servicio, el cliente ya debe tener un Prepago Multicaja**
        
        La nueva tarjeta es retornada por el servicio.
        Si el cliente no tiene Prepago Multicaja, el servicio retornará `422`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/PrepaidCard'
        '404':
          description: Cliente no existe
        '422':
          description: Cliente no cuenta con un Prepago Multicaja
  /users/{user_id}/prepaid/status/lock:
    post:
      summary: Bloquea la tarjeta
      tags:
        - prepago
      description: |
        Bloquea la tarjeta. Si la tarjeta ya está bloqueada, no hace nada.
        
        **Para invocar este servicio, el cliente ya debe tener un Prepago Multicaja**
        
        Si el cliente no tiene Prepago Multicaja, el servicio retornará `405`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/PrepaidCard'
        '404':
          description: Cliente no existe
        '405':
          description: Cliente no cuenta con un Prepago Multicaja
  /users/{user_id}/prepaid/status/unlock:
    post:
      summary: Desbloquea la tarjeta
      tags:
        - prepago
      description: |
        Desbloquea la tarjeta. Si la tarjeta ya está activa o expirada, no hace nada.
        
        **Para invocar este servicio, el cliente ya debe tener un Prepago Multicaja**
        
        Si el cliente no tiene Prepago Multicaja, el servicio retornará `405`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '201':
          description: OK
          schema:
            $ref: '#/definitions/PrepaidCard'
        '404':
          description: Cliente no existe
        '405':
          description: Cliente no cuenta con un Prepago Multicaja
  /users/{user_id}/prepaid/transactions:
    get:
      summary: Transacciones de la tarjeta
      tags: 
        - prepago
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/PrepaidTransaction'
        '404':
          description: Cliente no existe
  /users/{user_id}/bank_accounts:
    get:
      summary: Retorna las cuentas bancarias de este cliente
      tags: 
        - cuentas
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BankAccount'
        '404':
          description: Cliente no existe
    post:
      summary: Asocia una nueva cuenta bancaria a este cliente
      tags: 
        - cuentas
      description: |
        Crea una nueva cuenta bancaria para este cliente
        
        * La terna (`account.bank_id`, `account.acc_type`, `account.acc_number`) debe ser única para este usuario. De lo contrario, el servicio retornará `405`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: account
          description: Cuenta bancaria
          required: true
          schema:
            $ref: '#/definitions/BankAccount'
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/BankAccount'
        '404':
          description: Cliente no existe
        '405':
          description: La cuenta ya existe
  /users/{user_id}/bank_accounts/{acc_id}:
    delete:
      summary: Elimina la cuenta del cliente
      tags: 
        - cuentas
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: path
          name: acc_id
          description: ID de la cuenta
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
        '404':
          description: Cliente o Cuenta no existen
  /users/{user_id}/addresses:
    get:
      summary: Retorna las direcciones de este cliente
      tags: 
        - direcciones
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Address'
        '404':
          description: Cliente no existe
    post:
      summary: Asocia una nueva dirección a este cliente
      tags: 
        - direcciones
      description: |
        Crea una nueva dirección para este cliente
        
        * La terna (`address.line_1`, `address.commune`, `address.region`) debe ser única para este usuario. De lo contrario, el servicio retornará `405`
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: body
          name: address
          description: Dirección
          required: true
          schema:
            $ref: '#/definitions/Address'
      responses:
        '201':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Address'
        '404':
          description: Cliente no existe
        '405':
          description: La dirección ya existe
  /users/{user_id}/addresses/{addr_id}:
    delete:
      summary: Elimina la dirección del cliente
      tags: 
        - direcciones
      parameters:
        - in: path
          name: user_id
          description: ID del usuario
          required: true
          type: "integer"
        - in: path
          name: addr_id
          description: ID de la dirección
          required: true
          type: "integer"
      responses:
        '200':
          description: OK
        '404':
          description: Cliente o Dirección no existen
  /params/banks:
    get:
      summary: Retorna la lista de todos los bancos
      tags: 
        - parámetros
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Param'
  /params/communes:
    get:
      summary: Retorna la lista de todas las comunas
      tags: 
        - parámetros
      parameters:
        - name: "region"
          in: "query"
          description: "id de region para busqueda"
          required: false
          type: "integer"
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Param'
  /params/regions:
    get:
      summary: Retorna la lista de todas las regiones
      tags: 
        - parámetros
      responses:
        '200':
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/Param'
definitions:
  User:
    type: object
    description: Cliente persona natural
    required:
      - rut
      - email
    properties:
      id:
        type: integer
        description: Identificador interno. Campo read-only.
        example: 7783834
      rut:
        $ref: '#/definitions/Rut'
      cellphone:
        $ref: '#/definitions/CellPhone'
      email:
        $ref: '#/definitions/Email'
      clave:
        type: string
        description: Clave de autenticación de 4 dígitos. Campo write-only.
        example: 8922
      name:
        type: string
        description: Nombre o nombres de pila
        example: "Juan Carlos"
      business_name:
        type: string
        description: Nombre de empresa (Razón social)
        example: "Multicaja"
      lastname_1:
        type: string
        description: Apellido paterno
        example: "López"
      lastname_2:
        type: string
        description: Apellido materno
        example: "Carrasco"
      gender:
        type: string
        enum: ["M", "F", "N"]
        description: |
          Sexo de la persona
          * M: Masculino
          * F: Femenino
          * N: Otro / prefiere no responder
      birthday:
        type: string
        format: date
        description: Fecha de nacimiento
        example: "1977-1-14"
      address:
        $ref: '#/definitions/Address'
      globalStatus:
        type: string
        enum:
          - pre-registro
          - activo
          - bloqueado
          - borrado
        description: |
          Estado del cliente. Campo read-only.
          * "pre-registro": cliente no posee clave
          * "activo": cliente con clave que puede transar
          * "bloqueado": cuenta temporalmente congelada
          * "borrado": eliminación lógica del cliente, no admite ningún cambio
      timestamps:
        $ref: '#/definitions/Timestamps'
  Rut:
    type: object
    required:
      - value
    properties:
      value:
        type: integer
        format: int32
        description: El rut sin puntos, guión, ni dígito verificador
        minimum: 1
        maximum: 50000000
      serial_number:
        type: string
        description: "Número de serie o número de documento. Éste es un campo write-only, por lo que *nunca* vendrá como respuesta de la API"
        example: "A026582309"
      dv:
        type: string
        description: digito verificador
        maxLength: 1
      status:
        type: string
        enum:
          - no_validado
          - validado_srcei
          - validado_tef
        description: |
          Estado de validación del rut
          * no_validado: el rut no ha sido validado o las validaciones no han sido exitosas
          * validado_srcei: el rut fue validado exitosamente contra el registro civil
          * validado_tef: la validación más fuerte, ya que el usuario ha realizado un aviso de depósito seguido de una transferencia desde una cuenta correspondiente a su rut
      timestamps:
        $ref: '#/definitions/Timestamps'
  Email:
    type: object
    required:
      - value
    properties:
      value:
        type: string
        format: email
        example: "pepito@gmail.com"
      status:
        type: string
        enum:
          - no_validado
          - en_proceso_de_validacion
          - validado
        description: |
          Estado de validación del email
          * no_validado: el email no ha sido validado
          * en_proceso_de_validacion: se ha enviado al menos un correo de validación, pero el usuario no ha hecho clic en el link
          * validado: el usuario demostró tener acceso a la casilla haciendo clic en un link enviado a ésta
      timestamps:
        $ref: '#/definitions/Timestamps'
  CellPhone:
    type: object
    required:
      - value
    properties:
      value:
        type: string
        description: Los 9 números que siguen a '+56'
        example: "912345678"
      status:
        type: string
        enum:
          - no_validado
          - en_proceso_de_validacion
          - validado
        description: |
          Estado de validación del celular
          * no_validado: el celular no ha sido validado
          * en_proceso_de_validacion: se ha enviado al menos un sms de validación, pero el usuario no ha usado el código
          * validado: el usuario demostró tener acceso al celular usando el código enviado a éste
      timestamps:
        $ref: '#/definitions/Timestamps'
  Timestamps:
    type: object
    description: Fecha de creación y de última modificación.  Campo read-only.
    properties:
      created_at:
        type: string
        format: date-time
        example: "2018-01-14T15:27:42.669Z"
      updated_at:
        type: string
        format: date-time
        example: "2018-03-02T10:03:12.123Z"
  Address:
    type: object
    required:
      - line_1
    properties:
      id:
        type: integer
        description: Identificador interno. Campo read-only.
        example: 7783834
      line_1:
        type: string
        description: Lo que se une a región y comuna para determinar el código postal
        example: Suecia 1414
      line_2:
        type: string
        description: Información adicional como número de departamento. No afecta el código postal.
        example: Depto 502
      region_id:
        type: integer
        example: 13
        description: ID de la comuna (ver /params/regions)
      commune_id:
        type: integer
        example: 230
        description: ID de la comuna (ver /params/communes)
      postal_code:
        type: string
        description: Identificador de (`address.line_1`, `address.commune`, `address.region`)
        example: 7710787
  BankAccount:
    type: object
    required:
      - bank_id
      - acc_type
      - acc_number
    properties:
      id:
        type: integer
        description: Identificador interno. Campo read-only.
        example: 7783834
      bank_id:
        type: integer
        description: ID del banco (revisar /params/banks)
        example: 4
      acc_type:
        type: string
        description: Tipo de cuenta
        enum:
          - vista
          - corriente
          - ahorro
      acc_number:
        type: string
        description: Número de cuenta sin puntos, guiones, ni ceros a la izquierda
      status:
        type: string
        enum:
          - no_validada
          - validada
        description: |
          Estado de validación de la cuenta
          * no_validada: estado por defecto
          * validada: el usuario hizo una aviso de depósito seguido de una transferencia desde esta cuenta
      timestamps:
        $ref: '#/definitions/Timestamps'
  PrepaidTransaction:
    type: object
    required:
      - auth_code
      - amount
      - desc
    description: Transacción realizada con la tarjeta de prepago
    properties:
      auth_code:
        type: string
        description: Identificador del movimiento en el procesador
        example: "88457"
      amount:
        type: integer
        description: Monto del movimiento
        example: 45737
      desc:
        type: string
        description: Glosa
        example: "Abono sucursal Web"
  PrepaidCard:
    type: object
    required:
      - id
      - pan
    description: Tarjeta de prepago Visa o Mastercard
    properties:
      id:
        type: integer
        description: Identificador interno. Campo read-only.
        example: 7783834
      processor_user_id:
        type: string
        description: Identificador del cliente en el procesador
        example: "2231-9892-781283049685"
      pan:
        type: string
        description: PAN de la tarjeta
        example: "123456******1234"
      expiration:
        type: string
        description: Fecha de expiración de la tarjeta
        example: "11/22"
      status:
        type: string
        enum:
          - activa
          - bloqueada
          - expirada
        description: |
          Estado de la tarjeta
          * activa: permite comprar
          * bloqueada: la tarjeta fue bloqueada por el cliente
          * expirada: la tarjeta expiró
      timestamps:
        $ref: '#/definitions/Timestamps'
  Param:
    type: object
    required:
      - id
      - value
    description: Parámetro básico
    properties:
      id:
        type: integer
        description: identificador del parámetro
      value:
        type: string
        description: nombre del parámetro
      desc:
        type: string
        description: descripción del parámetro